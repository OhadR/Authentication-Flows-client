<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


    <context:property-placeholder location="classpath:/client.properties" />

    <context:component-scan base-package="com.ohadr.security.oauth.examples" />

    <context:annotation-config />

    <mvc:default-servlet-handler />

    <mvc:annotation-driven/>


    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/pages/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>



	<sec:http authentication-manager-ref="authenticationManager">
		<sec:intercept-url pattern="/secure/**" access="ROLE_USER" />
		<sec:anonymous/>

        <!-- sec:form-login/-->
        
		<sec:form-login 
			login-page="/login/login.htm" 
			authentication-failure-url="/login/login.htm?login_error=1" />

        
		<sec:custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
	</sec:http>

	<!-- bean name="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="loginFormUrl" value="/oauth/commence" />
		<property name="useForward" value="false" />
	</bean-->


    <!-- bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.MediaTypeAwareAuthenticationEntryPoint">
        <property name="realmName" value="butkec" />
    </bean>

    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.MediaTypeAwareAccessDeniedHandler" /-->
 


    <sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider user-service-ref="userDetailsService"/>
	</sec:authentication-manager>
	
	<sec:user-service id="userDetailsService">
		<sec:user name="admin"  password="admin"  authorities="ROLE_USER,ROLE_ADMIN" />
	</sec:user-service>
	


    <!--apply the oauth client context-->
	<oauth:client 	id="oauth2ClientFilter" />
					

	<!--define an oauth 2 resource for sparklr (creates instance of AuthorizationCodeResourceDetails [extends ... OAuth2ProtectedResourceDetails]) -->
	<oauth:resource id="butkecResource"
                    type="authorization_code"
                    client-id="${oauth2.client.id}"
                    client-secret="${oauth2.client.secret}"
		            access-token-uri="${oauth2.client.accessTokenUri}"
                    user-authorization-uri="${oauth2.client.userAuthorizationUri}"
                    scope="read"/>
                    
	<!--define an oauth2 resource for facebook. according to the facebook docs, the 'client-id' is the App ID, and the 'client-secret' 
		is the App Secret -->
	<oauth:resource id="facebook" 
		type="authorization_code" 
		client-id="233668646673605" 
		client-secret="33b17e044ee6a4fa383f46ec6e28ea1d"
		authentication-scheme="query" 
		access-token-uri="https://graph.facebook.com/oauth/access_token" 
		user-authorization-uri="https://www.facebook.com/dialog/oauth"
		token-name="oauth_token" 
		client-authentication-scheme="form" />
                    

	<!-- instead of defining oauth:resource (OAuth2ProtectedResourceDetails), we define our cusomt type
		that enables us the "hack". Spring's type define in ctor all params, we do it lazily - ->
	<bean id="WebAppOAuth2ResourceDetails" class="com.ohadr.security.oauth.examples.web.WebAppOAuth2ResourceDetails">
  		<constructor-arg index="0"><value>${oauth2.client.id}</value></constructor-arg>
  		<constructor-arg index="1"><value>${oauth2.client.secret}</value></constructor-arg>

		<property name="userAuthorizationUri" value="${oauth2.client.userAuthorizationUri}" />
		<property name="accessTokenUri" value="${oauth2.client.accessTokenUri}" />
  		
	</bean-->	



	
	<bean id="butkeDemoService" class="com.ohadr.security.oauth.examples.impl.DemoServiceImpl">
		<property name="demoUrl" value="${demoUrl}" />
	</bean>
	
	<oauth:rest-template id="oauthRestTemplate" resource="butkecResource" />
	
</beans>
